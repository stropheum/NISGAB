//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by NisGab's code generation tooling
//     from Assets/Config/InputSystemActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using UnityEngine.InputSystem;

namespace NisGab
{
	/// <summary>
	/// Simple event container for UI actions
	/// </summary>
	public class UIInputActions
	{
		public event Action<InputAction.CallbackContext> Navigate;
		public event Action<InputAction.CallbackContext> Submit;
		public event Action<InputAction.CallbackContext> Cancel;
		public event Action<InputAction.CallbackContext> Point;
		public event Action<InputAction.CallbackContext> Click;
		public event Action<InputAction.CallbackContext> RightClick;
		public event Action<InputAction.CallbackContext> MiddleClick;
		public event Action<InputAction.CallbackContext> ScrollWheel;
		public event Action<InputAction.CallbackContext> TrackedDevicePosition;
		public event Action<InputAction.CallbackContext> TrackedDeviceOrientation;
		public event Action<InputAction.CallbackContext> LeftMousePress;
		public event Action<InputAction.CallbackContext> LeftMouseRelease;

		internal void Bind(InputSystemActions.UIActions actions)
		{
			actions.Navigate.performed += OnNavigate;
			actions.Submit.performed += OnSubmit;
			actions.Cancel.performed += OnCancel;
			actions.Point.performed += OnPoint;
			actions.Click.performed += OnClick;
			actions.RightClick.performed += OnRightClick;
			actions.MiddleClick.performed += OnMiddleClick;
			actions.ScrollWheel.performed += OnScrollWheel;
			actions.TrackedDevicePosition.performed += OnTrackedDevicePosition;
			actions.TrackedDeviceOrientation.performed += OnTrackedDeviceOrientation;
			actions.LeftMousePress.performed += OnLeftMousePress;
			actions.LeftMouseRelease.performed += OnLeftMouseRelease;
		}

		internal void UnBind(InputSystemActions.UIActions actions)
		{
			actions.Navigate.performed -= OnNavigate;
			actions.Submit.performed -= OnSubmit;
			actions.Cancel.performed -= OnCancel;
			actions.Point.performed -= OnPoint;
			actions.Click.performed -= OnClick;
			actions.RightClick.performed -= OnRightClick;
			actions.MiddleClick.performed -= OnMiddleClick;
			actions.ScrollWheel.performed -= OnScrollWheel;
			actions.TrackedDevicePosition.performed -= OnTrackedDevicePosition;
			actions.TrackedDeviceOrientation.performed -= OnTrackedDeviceOrientation;
			actions.LeftMousePress.performed -= OnLeftMousePress;
			actions.LeftMouseRelease.performed -= OnLeftMouseRelease;
		}

		private void OnNavigate(InputAction.CallbackContext context)
		{
			Navigate?.Invoke(context);
		}

		private void OnSubmit(InputAction.CallbackContext context)
		{
			Submit?.Invoke(context);
		}

		private void OnCancel(InputAction.CallbackContext context)
		{
			Cancel?.Invoke(context);
		}

		private void OnPoint(InputAction.CallbackContext context)
		{
			Point?.Invoke(context);
		}

		private void OnClick(InputAction.CallbackContext context)
		{
			Click?.Invoke(context);
		}

		private void OnRightClick(InputAction.CallbackContext context)
		{
			RightClick?.Invoke(context);
		}

		private void OnMiddleClick(InputAction.CallbackContext context)
		{
			MiddleClick?.Invoke(context);
		}

		private void OnScrollWheel(InputAction.CallbackContext context)
		{
			ScrollWheel?.Invoke(context);
		}

		private void OnTrackedDevicePosition(InputAction.CallbackContext context)
		{
			TrackedDevicePosition?.Invoke(context);
		}

		private void OnTrackedDeviceOrientation(InputAction.CallbackContext context)
		{
			TrackedDeviceOrientation?.Invoke(context);
		}

		private void OnLeftMousePress(InputAction.CallbackContext context)
		{
			LeftMousePress?.Invoke(context);
		}

		private void OnLeftMouseRelease(InputAction.CallbackContext context)
		{
			LeftMouseRelease?.Invoke(context);
		}
	}
}